C51 COMPILER V9.56.0.0   VARIABLE_DUTY_CYCLE                                               04/26/2017 03:54:50 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE VARIABLE_DUTY_CYCLE
OBJECT MODULE PLACED IN .\Objects\Variable_Duty_Cycle.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Variable_Duty_Cycle.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(
                    -.\Listings\Variable_Duty_Cycle.lst) TABS(2) OBJECT(.\Objects\Variable_Duty_Cycle.obj)

line level    source

   1          /*
   2          
   3            C51 Variable Duty Cycle Frequency Generator
   4            GitHub: https://github.com/SubNader/C51FrequencyGenerator
   5            Credits: Nader Alsharkawy (3001) and Mohamed Amgad (3009) | Group 36
   6          
   7          */
   8          
   9          #include <at89c51xd2.h>
  10          #include <stdio.h>
  11          
  12          // Input port definition
  13          #define input_port P1
  14          
  15          // Ouput pins definition
  16          sbit output_bit = P2^0;
  17          sbit output_switch = P2^7;
  18          sbit error = P2^6;
  19          
  20          // Delay function prototype
  21          void delay(unsigned char high, unsigned char low);
  22          
  23          // Variables definition - chars for 8 bits / floats for numerical values
  24          unsigned char input,updated_input,input_high,input_low,
  25                positive_high,positive_low,
  26                negative_high,negative_low;
  27          float internal_frequency, duty_cycle, total_cycles_count,
  28                positive_cycles_count, positive_cycles_start_value,
  29                negative_cycles_count, negative_cycles_start_value,
  30                max_cycles = 65536 ;
  31          
  32          void main(void){
  33   1        // Initialize input port
  34   1        input_port = 0xFF;
  35   1        
  36   1        // Enable timer 0 in mode 1 - 0000 0001
  37   1        TMOD = 0x01;
  38   1        
  39   1        // Initialize pins
  40   1        output_bit = 0;
  41   1        output_switch = 1;
  42   1        error = 1;
  43   1        
  44   1        // Compute the internal MC frequency - assuming a 22.1184MHz crystal
  45   1        internal_frequency = 22118400/12.0;
  46   1        
  47   1        // Compute the total number of cycles (full period)
  48   1        total_cycles_count = (1/500.0)/(1/internal_frequency);
  49   1        
  50   1          
  51   1        while (1) {
  52   2          //Fetch and handle low and high nibbles from input port
  53   2          input_high = (input_port & 0xF0) >> 4;
  54   2          input_low = input_port & 0x0F;
C51 COMPILER V9.56.0.0   VARIABLE_DUTY_CYCLE                                               04/26/2017 03:54:50 PAGE 2   

  55   2      
  56   2          if (output_switch==0){
  57   3            
  58   3          // Validate and handle invalid input
  59   3          if (!(input_high > 0x09 || input_low > 0x09)){
  60   4            error = 1;
  61   4            // Fetch and handle low and high nibbles from input port
  62   4            input_high = (input_port & 0xF0) >> 4;
  63   4            input_low = input_port & 0x0F;
  64   4            
  65   4            // Compute duty cycle
  66   4            duty_cycle = input_high*10+input_low;
  67   4        
  68   4            // Compute the positive and negative cycles and the corresponding timer start values based on the duty 
             -cycle
  69   4            positive_cycles_count = (int)((duty_cycle/100.0)*total_cycles_count);
  70   4            negative_cycles_count = total_cycles_count - positive_cycles_count;
  71   4            positive_cycles_start_value = max_cycles - positive_cycles_count;
  72   4            negative_cycles_start_value = max_cycles - negative_cycles_count;
  73   4        
  74   4            // Compute low and high byte values from computed start values
  75   4            positive_low = (int)positive_cycles_start_value&0x00FF;
  76   4            positive_high = ((int)positive_cycles_start_value&0xFF00) >> 8;
  77   4            negative_low = (int)negative_cycles_start_value&0x00FF;
  78   4            negative_high = ((int)negative_cycles_start_value&0xFF00) >> 8;
  79   4        
  80   4            // Handle runtime input update
  81   4            input = updated_input = input_port; 
  82   4            
  83   4            // Ouput loop
  84   4            while (input==updated_input && output_switch==0){
  85   5      
  86   5              // Positive portion
  87   5              output_bit = ~output_bit;
  88   5              delay(positive_high,positive_low);
  89   5              
  90   5              // Negative portion
  91   5              output_bit = ~output_bit;
  92   5              delay(negative_high,negative_low);
  93   5          
  94   5              // Fetch input port state to check if altered
  95   5              updated_input = input_port;
  96   5            }
  97   4          }
  98   3          else{
  99   4              // Stop output
 100   4              output_bit = 0;
 101   4              
 102   4              // Enable error indication
 103   4              error = 0;
 104   4          }
 105   3        }else{
 106   3          // Disable error indication
 107   3          error = 1;
 108   3        }
 109   2        }
 110   1      }
 111          
 112          // Delay function
 113          void delay(unsigned char high, unsigned char low){
 114   1        
 115   1        // Set timer's start value
C51 COMPILER V9.56.0.0   VARIABLE_DUTY_CYCLE                                               04/26/2017 03:54:50 PAGE 3   

 116   1        TH0 = high;
 117   1        TL0 = low;
 118   1        
 119   1        // Start timer
 120   1        TR0 = 1;
 121   1        
 122   1        // Loop till rollover
 123   1          while(TF0 == 0);
 124   1        
 125   1        // Clear timer run (enable) and flag
 126   1        TR0 = 0;
 127   1        TF0 = 0;
 128   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    377    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     40    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
